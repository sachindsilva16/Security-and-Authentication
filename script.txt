SALTING

- creates a random set of characters
- results in different hash values even though the password is same.Since salt will be different for every instance.


BCRYPT

- Industry standard hashing algorithm that requires to generate 17,000 bcrypt Hashes/second for the computation to hack.
- More salt rounds-- >"MORE WILL BE" amount of time to hash --->more the SECURE.



COOKIES AND SESSIONS..

- One of the cookie that we gonna be dealing is SESSION cookie

- Implemented using passport.js which is a simple,unobtrusive authentication for NodeJS.


- To implement this, npm install the following dependencies..

 >> npm i passport
 >> npm i passport-local
 >> npm i passport-local-mongoose
 >> npm i express-session (NOT express-sessions)


-> Use session.
-> Initialize session using passport.
-> Start the session using passport.
-> Setup passport-local-mongoose by adding plugin.
-> Add passport-local configuration.

 Visit this documentation :https://www.npmjs.com/package/express-session


// Use functionality of session

app.use(session({
    secret:"thisisoursecret",
    resave:false,
    saveUninitialized:true,

}));

// Initialize passport
app.use(passport.initialize());

// Start the session
app.use(passport.session());

-> Next you've to setup the passport-local-mongoose.
Visit the documentation : https://www.npmjs.com/package/passport-local-mongoose

-> Add plugin to app just below the defined MONGOOSE-SCHEMA.
ie.,   userSchema.plugin(passportLocalMongoose);

-> Add passport-local configuration 

const LocalStrategy = require("passport-local").Strategy;

// Place this after the model 'User'
passport.use(new LocalStrategy(User.authenticate()));

// use static serialize and deserialize of model for passport session support
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());


-> Authenticate session (refer  /register post route)
-> Authenticate session upon /login.
req.login(user, function(err) {
  if (err) { return next(err); }
  return res.redirect('/users/' + req.user.username);
});


 

